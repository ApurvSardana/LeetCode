class Solution {
public:
    vector<bool> visited;
    bool bfs(vector<vector<int>> &graph, int root, vector<int> &color){
        color[root] = 0;

        queue<int> q;
        q.push(root);

        while(!q.empty()){
            int u = q.front();
            q.pop();

            for(int v : graph[u]){
                if(color[v] == -1){
                    visited[v] = true;
                    color[v] = 1 - color[u];
                    q.push(v);
                }

                else if(color[v] == color[u])
                    return false;
            }
        }
        return true;
    }
    bool isBipartite(vector<vector<int>>& graph) {
        int n = graph.size();

        vector<int> color(n, -1);
        visited.assign(n, false);
        
        bool  ans = true;
        for(int i = 0; i < n; i++)
            if(!visited[i])
                ans &= bfs(graph, i, color);

        return ans; 
    }
};